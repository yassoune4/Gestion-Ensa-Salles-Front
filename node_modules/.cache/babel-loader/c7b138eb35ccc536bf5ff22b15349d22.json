{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\hp folio\\\\Documents\\\\ProjetLibre\\\\Front\\\\gestion-salle-front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\hp folio\\\\Documents\\\\ProjetLibre\\\\Front\\\\gestion-salle-front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\hp folio\\\\Documents\\\\ProjetLibre\\\\Front\\\\gestion-salle-front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\hp folio\\\\Documents\\\\ProjetLibre\\\\Front\\\\gestion-salle-front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\hp folio\\\\Documents\\\\ProjetLibre\\\\Front\\\\gestion-salle-front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\hp folio\\\\Documents\\\\ProjetLibre\\\\Front\\\\gestion-salle-front\\\\src\\\\app\\\\auth\\\\Auth.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as userActions from 'app/auth/store/actions';\nimport { bindActionCreators } from 'redux';\nimport * as Actions from 'app/store/actions';\nimport firebaseService from 'app/services/firebaseService';\nimport auth0Service from 'app/services/auth0Service';\nimport jwtService from 'app/services/jwtService';\n\nvar Auth =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Auth, _Component);\n\n  /*eslint-disable-next-line no-useless-constructor*/\n  function Auth(props) {\n    var _this;\n\n    _classCallCheck(this, Auth);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Auth).call(this, props));\n    /**\n     * Comment the line if you do not use JWt\n     */\n    //this.jwtCheck();\n\n    /**\n     * Comment the line if you do not use Auth0\n     */\n    //this.auth0Check();\n\n    /**\n     * Comment the line if you do not use Firebase\n     */\n    //this.firebaseCheck();\n\n    _this.jwtCheck = function () {\n      jwtService.on('onAutoLogin', function () {\n        _this.props.showMessage({\n          message: 'Logging in with JWT'\n        });\n        /**\n         * Sign in and retrieve user data from Api\n         */\n\n\n        jwtService.signInWithToken().then(function (user) {\n          _this.props.setUserData(user);\n\n          _this.props.showMessage({\n            message: 'Logged in with JWT'\n          });\n        }).catch(function (error) {\n          _this.props.showMessage({\n            message: error\n          });\n        });\n      });\n      jwtService.on('onAutoLogout', function (message) {\n        if (message) {\n          _this.props.showMessage({\n            message: message\n          });\n        }\n\n        _this.props.logout();\n      });\n      jwtService.init();\n    };\n\n    _this.auth0Check = function () {\n      auth0Service.init();\n\n      if (auth0Service.isAuthenticated()) {\n        _this.props.showMessage({\n          message: 'Logging in with Auth0'\n        });\n        /**\n         * Retrieve user data from Auth0\n         */\n\n\n        auth0Service.getUserData().then(function (tokenData) {\n          _this.props.setUserDataAuth0(tokenData);\n\n          _this.props.showMessage({\n            message: 'Logged in with Auth0'\n          });\n        });\n      }\n    };\n\n    _this.firebaseCheck = function () {\n      firebaseService.init();\n      firebaseService.onAuthStateChanged(function (authUser) {\n        if (authUser) {\n          _this.props.showMessage({\n            message: 'Logging in with Firebase'\n          });\n          /**\n           * Retrieve user data from Firebase\n           */\n\n\n          firebaseService.getUserData(authUser.uid).then(function (user) {\n            _this.props.setUserDataFirebase(user, authUser);\n\n            _this.props.showMessage({\n              message: 'Logged in with Firebase'\n            });\n          });\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Auth, [{\n    key: \"render\",\n    value: function render() {\n      var children = this.props.children;\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, children);\n    }\n  }]);\n\n  return Auth;\n}(Component);\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    logout: userActions.logoutUser,\n    setUserData: userActions.setUserData,\n    setUserDataAuth0: userActions.setUserDataAuth0,\n    setUserDataFirebase: userActions.setUserDataFirebase,\n    showMessage: Actions.showMessage,\n    hideMessage: Actions.hideMessage\n  }, dispatch);\n}\n\nexport default connect(null, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["C:\\Users\\hp folio\\Documents\\ProjetLibre\\Front\\gestion-salle-front\\src\\app\\auth\\Auth.js"],"names":["React","Component","connect","userActions","bindActionCreators","Actions","firebaseService","auth0Service","jwtService","Auth","props","jwtCheck","on","showMessage","message","signInWithToken","then","user","setUserData","catch","error","logout","init","auth0Check","isAuthenticated","getUserData","tokenData","setUserDataAuth0","firebaseCheck","onAuthStateChanged","authUser","uid","setUserDataFirebase","children","mapDispatchToProps","dispatch","logoutUser","hideMessage"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport * as userActions from 'app/auth/store/actions';\nimport {bindActionCreators} from 'redux';\nimport * as Actions from 'app/store/actions';\nimport firebaseService from 'app/services/firebaseService';\nimport auth0Service from 'app/services/auth0Service';\nimport jwtService from 'app/services/jwtService';\n\nclass Auth extends Component {\n    /*eslint-disable-next-line no-useless-constructor*/\n    constructor(props)\n    {\n        super(props);\n\n        /**\n         * Comment the line if you do not use JWt\n         */\n        //this.jwtCheck();\n\n        /**\n         * Comment the line if you do not use Auth0\n         */\n        //this.auth0Check();\n\n        /**\n         * Comment the line if you do not use Firebase\n         */\n        //this.firebaseCheck();\n    }\n\n    jwtCheck = () => {\n        jwtService.on('onAutoLogin', () => {\n\n            this.props.showMessage({message: 'Logging in with JWT'});\n\n            /**\n             * Sign in and retrieve user data from Api\n             */\n            jwtService.signInWithToken()\n                .then(user => {\n                    this.props.setUserData(user);\n\n                    this.props.showMessage({message: 'Logged in with JWT'});\n                })\n                .catch(error => {\n                    this.props.showMessage({message: error});\n                })\n        });\n\n        jwtService.on('onAutoLogout', (message) => {\n            if ( message )\n            {\n                this.props.showMessage({message});\n            }\n            this.props.logout();\n        });\n\n        jwtService.init();\n    };\n\n    auth0Check = () => {\n\n        auth0Service.init();\n\n        if ( auth0Service.isAuthenticated() )\n        {\n            this.props.showMessage({message: 'Logging in with Auth0'});\n\n            /**\n             * Retrieve user data from Auth0\n             */\n            auth0Service.getUserData().then(tokenData => {\n\n                this.props.setUserDataAuth0(tokenData);\n\n                this.props.showMessage({message: 'Logged in with Auth0'});\n            })\n        }\n    };\n\n    firebaseCheck = () => {\n\n        firebaseService.init();\n\n        firebaseService.onAuthStateChanged(authUser => {\n            if ( authUser )\n            {\n                this.props.showMessage({message: 'Logging in with Firebase'});\n\n                /**\n                 * Retrieve user data from Firebase\n                 */\n                firebaseService.getUserData(authUser.uid).then(user => {\n\n                    this.props.setUserDataFirebase(user, authUser);\n\n                    this.props.showMessage({message: 'Logged in with Firebase'});\n                })\n            }\n        });\n    };\n\n    render()\n    {\n        const {children} = this.props;\n\n        return (\n            <React.Fragment>\n                {children}\n            </React.Fragment>\n        );\n    }\n}\n\nfunction mapDispatchToProps(dispatch)\n{\n    return bindActionCreators({\n            logout             : userActions.logoutUser,\n            setUserData        : userActions.setUserData,\n            setUserDataAuth0   : userActions.setUserDataAuth0,\n            setUserDataFirebase: userActions.setUserDataFirebase,\n            showMessage        : Actions.showMessage,\n            hideMessage        : Actions.hideMessage\n        },\n        dispatch);\n}\n\nexport default connect(null, mapDispatchToProps)(Auth);\n"]},"metadata":{},"sourceType":"module"}