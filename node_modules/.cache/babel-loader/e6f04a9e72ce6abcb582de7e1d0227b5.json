{"ast":null,"code":"import firebaseService from 'app/services/firebaseService';\nimport jwtService from 'app/services/jwtService';\nimport { setUserData } from './user.actions';\nimport * as Actions from 'app/store/actions';\nexport var LOGIN_ERROR = 'LOGIN_ERROR';\nexport var LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport function submitLogin(_ref) {\n  var email = _ref.email,\n      password = _ref.password;\n  return function (dispatch) {\n    return jwtService.signInWithEmailAndPassword(email, password).then(function (user) {\n      dispatch(setUserData(user));\n      return dispatch({\n        type: LOGIN_SUCCESS\n      });\n    }).catch(function (error) {\n      return dispatch({\n        type: LOGIN_ERROR,\n        payload: error\n      });\n    });\n  };\n}\nexport function submitLoginWithFireBase(_ref2) {\n  var username = _ref2.username,\n      password = _ref2.password;\n  return function (dispatch) {\n    return firebaseService.auth && firebaseService.auth.signInWithEmailAndPassword(username, password).then(function () {\n      return dispatch({\n        type: LOGIN_SUCCESS\n      });\n    }).catch(function (error) {\n      var usernameErrorCodes = ['auth/email-already-in-use', 'auth/invalid-email', 'auth/operation-not-allowed', 'auth/user-not-found', 'auth/user-disabled'];\n      var passwordErrorCodes = ['auth/weak-password', 'auth/wrong-password'];\n      var response = {\n        username: usernameErrorCodes.includes(error.code) ? error.message : null,\n        password: passwordErrorCodes.includes(error.code) ? error.message : null\n      };\n\n      if (error.code === 'auth/invalid-api-key') {\n        dispatch(Actions.showMessage({\n          message: error.message\n        }));\n      }\n\n      return dispatch({\n        type: LOGIN_ERROR,\n        payload: response\n      });\n    });\n  };\n}","map":{"version":3,"sources":["C:\\Users\\hp folio\\Documents\\ProjetLibre\\Front\\gestion-salle-front\\src\\app\\auth\\store\\actions\\login.actions.js"],"names":["firebaseService","jwtService","setUserData","Actions","LOGIN_ERROR","LOGIN_SUCCESS","submitLogin","email","password","dispatch","signInWithEmailAndPassword","then","user","type","catch","error","payload","submitLoginWithFireBase","username","auth","usernameErrorCodes","passwordErrorCodes","response","includes","code","message","showMessage"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,8BAA5B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,SAAQC,WAAR,QAA0B,gBAA1B;AACA,OAAO,KAAKC,OAAZ,MAAyB,mBAAzB;AAEA,OAAO,IAAMC,WAAW,GAAG,aAApB;AACP,OAAO,IAAMC,aAAa,GAAG,eAAtB;AAEP,OAAO,SAASC,WAAT,OACP;AAAA,MAD6BC,KAC7B,QAD6BA,KAC7B;AAAA,MADoCC,QACpC,QADoCA,QACpC;AACI,SAAO,UAACC,QAAD;AAAA,WACHR,UAAU,CAACS,0BAAX,CAAsCH,KAAtC,EAA6CC,QAA7C,EACKG,IADL,CACU,UAACC,IAAD,EAAU;AACRH,MAAAA,QAAQ,CAACP,WAAW,CAACU,IAAD,CAAZ,CAAR;AAEA,aAAOH,QAAQ,CAAC;AACZI,QAAAA,IAAI,EAAER;AADM,OAAD,CAAf;AAGH,KAPT,EASKS,KATL,CASW,UAAAC,KAAK,EAAI;AACZ,aAAON,QAAQ,CAAC;AACZI,QAAAA,IAAI,EAAKT,WADG;AAEZY,QAAAA,OAAO,EAAED;AAFG,OAAD,CAAf;AAIH,KAdL,CADG;AAAA,GAAP;AAgBH;AAED,OAAO,SAASE,uBAAT,QACP;AAAA,MADyCC,QACzC,SADyCA,QACzC;AAAA,MADmDV,QACnD,SADmDA,QACnD;AACI,SAAO,UAACC,QAAD;AAAA,WACHT,eAAe,CAACmB,IAAhB,IAAwBnB,eAAe,CAACmB,IAAhB,CAAqBT,0BAArB,CAAgDQ,QAAhD,EAA0DV,QAA1D,EACnBG,IADmB,CACd,YAAM;AACR,aAAOF,QAAQ,CAAC;AACZI,QAAAA,IAAI,EAAER;AADM,OAAD,CAAf;AAGH,KALmB,EAMnBS,KANmB,CAMb,UAAAC,KAAK,EAAI;AACZ,UAAMK,kBAAkB,GAAG,CACvB,2BADuB,EAEvB,oBAFuB,EAGvB,4BAHuB,EAIvB,qBAJuB,EAKvB,oBALuB,CAA3B;AAOA,UAAMC,kBAAkB,GAAG,CACvB,oBADuB,EAEvB,qBAFuB,CAA3B;AAKA,UAAMC,QAAQ,GAAG;AACbJ,QAAAA,QAAQ,EAAEE,kBAAkB,CAACG,QAAnB,CAA4BR,KAAK,CAACS,IAAlC,IAA0CT,KAAK,CAACU,OAAhD,GAA0D,IADvD;AAEbjB,QAAAA,QAAQ,EAAEa,kBAAkB,CAACE,QAAnB,CAA4BR,KAAK,CAACS,IAAlC,IAA0CT,KAAK,CAACU,OAAhD,GAA0D;AAFvD,OAAjB;;AAKA,UAAKV,KAAK,CAACS,IAAN,KAAe,sBAApB,EACA;AACIf,QAAAA,QAAQ,CAACN,OAAO,CAACuB,WAAR,CAAoB;AAACD,UAAAA,OAAO,EAAEV,KAAK,CAACU;AAAhB,SAApB,CAAD,CAAR;AACH;;AAED,aAAOhB,QAAQ,CAAC;AACZI,QAAAA,IAAI,EAAKT,WADG;AAEZY,QAAAA,OAAO,EAAEM;AAFG,OAAD,CAAf;AAIH,KAjCmB,CADrB;AAAA,GAAP;AAmCH","sourcesContent":["import firebaseService from 'app/services/firebaseService';\nimport jwtService from 'app/services/jwtService';\nimport {setUserData} from './user.actions';\nimport * as Actions from 'app/store/actions';\n\nexport const LOGIN_ERROR = 'LOGIN_ERROR';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\n\nexport function submitLogin({email, password})\n{\n    return (dispatch) =>\n        jwtService.signInWithEmailAndPassword(email, password)\n            .then((user) => {\n                    dispatch(setUserData(user));\n\n                    return dispatch({\n                        type: LOGIN_SUCCESS\n                    });\n                }\n            )\n            .catch(error => {\n                return dispatch({\n                    type   : LOGIN_ERROR,\n                    payload: error\n                });\n            });\n}\n\nexport function submitLoginWithFireBase({username, password})\n{\n    return (dispatch) =>\n        firebaseService.auth && firebaseService.auth.signInWithEmailAndPassword(username, password)\n            .then(() => {\n                return dispatch({\n                    type: LOGIN_SUCCESS\n                });\n            })\n            .catch(error => {\n                const usernameErrorCodes = [\n                    'auth/email-already-in-use',\n                    'auth/invalid-email',\n                    'auth/operation-not-allowed',\n                    'auth/user-not-found',\n                    'auth/user-disabled'\n                ];\n                const passwordErrorCodes = [\n                    'auth/weak-password',\n                    'auth/wrong-password'\n                ];\n\n                const response = {\n                    username: usernameErrorCodes.includes(error.code) ? error.message : null,\n                    password: passwordErrorCodes.includes(error.code) ? error.message : null\n                };\n\n                if ( error.code === 'auth/invalid-api-key' )\n                {\n                    dispatch(Actions.showMessage({message: error.message}));\n                }\n\n                return dispatch({\n                    type   : LOGIN_ERROR,\n                    payload: response\n                });\n            });\n}\n"]},"metadata":{},"sourceType":"module"}