{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\hp folio\\\\Documents\\\\ProjetLibre\\\\Front\\\\gestion-salle-front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport firebaseService from 'app/services/firebaseService';\nimport * as UserActions from './user.actions';\nimport * as Actions from 'app/store/actions';\nimport jwtService from 'app/services/jwtService';\nimport { showMessage } from \"../../../store/actions/fuse\";\nexport var REGISTER_ERROR = 'REGISTER_ERROR';\nexport var REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nexport function submitRegister(_ref) {\n  var username = _ref.username,\n      password = _ref.password,\n      email = _ref.email,\n      role = _ref.role;\n  return function (dispatch) {\n    return jwtService.createUser({\n      username: username,\n      password: password,\n      email: email,\n      role: role\n    }).then(function (user) {\n      //dispatch(UserActions.setUserData(user));\n      dispatch(showMessage({\n        message: 'User Created'\n      }));\n      return dispatch({\n        type: REGISTER_SUCCESS\n      });\n    }).catch(function (error) {\n      return dispatch({\n        type: REGISTER_ERROR,\n        payload: error\n      });\n    });\n  };\n}\nexport function registerWithFirebase(model) {\n  var email = model.email,\n      password = model.password,\n      displayName = model.displayName;\n  return function (dispatch) {\n    return firebaseService.auth && firebaseService.auth.createUserWithEmailAndPassword(email, password).then(function (response) {\n      dispatch(UserActions.createUserSettingsFirebase(_objectSpread({}, response.user, {\n        displayName: displayName,\n        email: email\n      })));\n      return dispatch({\n        type: REGISTER_SUCCESS\n      });\n    }).catch(function (error) {\n      var usernameErrorCodes = ['auth/operation-not-allowed', 'auth/user-not-found', 'auth/user-disabled'];\n      var emailErrorCodes = ['auth/email-already-in-use', 'auth/invalid-email'];\n      var passwordErrorCodes = ['auth/weak-password', 'auth/wrong-password'];\n      var response = {\n        email: emailErrorCodes.includes(error.code) ? error.message : null,\n        displayName: usernameErrorCodes.includes(error.code) ? error.message : null,\n        password: passwordErrorCodes.includes(error.code) ? error.message : null\n      };\n\n      if (error.code === 'auth/invalid-api-key') {\n        dispatch(Actions.showMessage({\n          message: error.message\n        }));\n      }\n\n      return dispatch({\n        type: REGISTER_ERROR,\n        payload: response\n      });\n    });\n  };\n}","map":{"version":3,"sources":["C:\\Users\\hp folio\\Documents\\ProjetLibre\\Front\\gestion-salle-front\\src\\app\\auth\\store\\actions\\register.actions.js"],"names":["firebaseService","UserActions","Actions","jwtService","showMessage","REGISTER_ERROR","REGISTER_SUCCESS","submitRegister","username","password","email","role","dispatch","createUser","then","user","message","type","catch","error","payload","registerWithFirebase","model","displayName","auth","createUserWithEmailAndPassword","response","createUserSettingsFirebase","usernameErrorCodes","emailErrorCodes","passwordErrorCodes","includes","code"],"mappings":"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","sourcesContent":["import firebaseService from 'app/services/firebaseService';\nimport * as UserActions from './user.actions';\nimport * as Actions from 'app/store/actions';\nimport jwtService from 'app/services/jwtService';\nimport {showMessage} from \"../../../store/actions/fuse\";\n\nexport const REGISTER_ERROR = 'REGISTER_ERROR';\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\n\nexport function submitRegister({username, password, email, role})\n{\n    return (dispatch) =>\n        jwtService.createUser({\n            username,\n            password,\n            email,\n            role\n        })\n            .then((user) => {\n                    //dispatch(UserActions.setUserData(user));\n                dispatch(showMessage({message: 'User Created'}));\n                    return dispatch({\n                        type: REGISTER_SUCCESS\n                    });\n                }\n            )\n            .catch(error => {\n                return dispatch({\n                    type   : REGISTER_ERROR,\n                    payload: error\n                });\n            });\n}\n\nexport function registerWithFirebase(model)\n{\n    const {email, password, displayName} = model;\n    return (dispatch) =>\n        firebaseService.auth && firebaseService.auth.createUserWithEmailAndPassword(email, password)\n            .then(response => {\n\n                dispatch(UserActions.createUserSettingsFirebase({\n                    ...response.user,\n                    displayName,\n                    email\n                }));\n\n                return dispatch({\n                    type: REGISTER_SUCCESS\n                });\n            })\n            .catch(error => {\n                const usernameErrorCodes = [\n                    'auth/operation-not-allowed',\n                    'auth/user-not-found',\n                    'auth/user-disabled'\n                ];\n\n                const emailErrorCodes = [\n                    'auth/email-already-in-use',\n                    'auth/invalid-email'\n                ];\n\n                const passwordErrorCodes = [\n                    'auth/weak-password',\n                    'auth/wrong-password'\n                ];\n\n                const response = {\n                    email      : emailErrorCodes.includes(error.code) ? error.message : null,\n                    displayName: usernameErrorCodes.includes(error.code) ? error.message : null,\n                    password   : passwordErrorCodes.includes(error.code) ? error.message : null\n                };\n\n                if ( error.code === 'auth/invalid-api-key' )\n                {\n                    dispatch(Actions.showMessage({message: error.message}));\n                }\n\n                return dispatch({\n                    type   : REGISTER_ERROR,\n                    payload: response\n                });\n            });\n}\n"]},"metadata":{},"sourceType":"module"}