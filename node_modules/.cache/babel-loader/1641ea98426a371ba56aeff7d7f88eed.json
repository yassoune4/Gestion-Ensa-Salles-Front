{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.styles = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _clsx = _interopRequireDefault(require(\"clsx\"));\n\nvar _withStyles = _interopRequireDefault(require(\"../styles/withStyles\"));\n\nvar _Popover = _interopRequireDefault(require(\"../Popover\"));\n\nvar _MenuList = _interopRequireDefault(require(\"../MenuList\"));\n\nvar _warning = _interopRequireDefault(require(\"warning\"));\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\nvar _reactHelpers = require(\"../utils/reactHelpers\");\n\nvar RTL_ORIGIN = {\n  vertical: 'top',\n  horizontal: 'right'\n};\nvar LTR_ORIGIN = {\n  vertical: 'top',\n  horizontal: 'left'\n};\nvar styles = {\n  /* Styles applied to the `Paper` component. */\n  paper: {\n    // specZ: The maximum height of a simple menu should be one or more rows less than the view\n    // height. This ensures a tapable area outside of the simple menu with which to dismiss\n    // the menu.\n    maxHeight: 'calc(100% - 96px)',\n    // Add iOS momentum scrolling.\n    WebkitOverflowScrolling: 'touch'\n  },\n\n  /* Styles applied to the `List` component via `MenuList`. */\n  list: {\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 'none'\n  }\n};\nexports.styles = styles;\n\nvar Menu = _react.default.forwardRef(function Menu(props, ref) {\n  var autoFocusProp = props.autoFocus,\n      children = props.children,\n      classes = props.classes,\n      _props$disableAutoFoc = props.disableAutoFocusItem,\n      disableAutoFocusItem = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc,\n      _props$MenuListProps = props.MenuListProps,\n      MenuListProps = _props$MenuListProps === void 0 ? {} : _props$MenuListProps,\n      onClose = props.onClose,\n      onEntering = props.onEntering,\n      open = props.open,\n      _props$PaperProps = props.PaperProps,\n      PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps,\n      PopoverClasses = props.PopoverClasses,\n      theme = props.theme,\n      _props$transitionDura = props.transitionDuration,\n      transitionDuration = _props$transitionDura === void 0 ? 'auto' : _props$transitionDura,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'selectedMenu' : _props$variant,\n      other = (0, _objectWithoutProperties2.default)(props, [\"autoFocus\", \"children\", \"classes\", \"disableAutoFocusItem\", \"MenuListProps\", \"onClose\", \"onEntering\", \"open\", \"PaperProps\", \"PopoverClasses\", \"theme\", \"transitionDuration\", \"variant\"]);\n  var autoFocus = autoFocusProp !== undefined ? autoFocusProp : !disableAutoFocusItem;\n\n  var menuListActionsRef = _react.default.useRef(null);\n\n  var firstValidItemRef = _react.default.useRef(null);\n\n  var firstSelectedItemRef = _react.default.useRef(null);\n\n  var getContentAnchorEl = function getContentAnchorEl() {\n    return firstSelectedItemRef.current || firstValidItemRef.current;\n  };\n\n  var handleEntering = function handleEntering(element) {\n    if (menuListActionsRef.current) {\n      menuListActionsRef.current.adjustStyleForScrollbar(element, theme);\n    }\n\n    if (onEntering) {\n      onEntering(element);\n    }\n  };\n\n  var handleListKeyDown = function handleListKeyDown(event) {\n    if (event.key === 'Tab') {\n      event.preventDefault();\n\n      if (onClose) {\n        onClose(event, 'tabKeyDown');\n      }\n    }\n  };\n\n  var firstValidElementIndex = null;\n  var firstSelectedIndex = null;\n\n  var items = _react.default.Children.map(children, function (child, index) {\n    if (!_react.default.isValidElement(child)) {\n      return null;\n    }\n\n    process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(child.type !== _react.default.Fragment, [\"Material-UI: the Menu component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n')) : void 0;\n\n    if (firstValidElementIndex === null) {\n      firstValidElementIndex = index;\n    }\n\n    var newChildProps = null;\n\n    if (variant === 'selectedMenu' && firstSelectedIndex === null && child.props.selected && !child.props.disabled) {\n      firstSelectedIndex = index;\n      newChildProps = {};\n\n      if (autoFocus) {\n        newChildProps.autoFocus = true;\n      }\n\n      if (child.props.tabIndex === undefined) {\n        newChildProps.tabIndex = 0;\n      }\n\n      newChildProps.ref = function (instance) {\n        // #StrictMode ready\n        firstSelectedItemRef.current = _reactDom.default.findDOMNode(instance);\n        (0, _reactHelpers.setRef)(child.ref, instance);\n      };\n    } else if (index === firstValidElementIndex) {\n      newChildProps = {\n        ref: function ref(instance) {\n          // #StrictMode ready\n          firstValidItemRef.current = _reactDom.default.findDOMNode(instance);\n          (0, _reactHelpers.setRef)(child.ref, instance);\n        }\n      };\n    }\n\n    if (newChildProps !== null) {\n      return _react.default.cloneElement(child, newChildProps);\n    }\n\n    return child;\n  });\n\n  return _react.default.createElement(_Popover.default, (0, _extends2.default)({\n    getContentAnchorEl: getContentAnchorEl,\n    classes: PopoverClasses,\n    onClose: onClose,\n    onEntering: handleEntering,\n    anchorOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,\n    transformOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,\n    PaperProps: (0, _extends2.default)({}, PaperProps, {\n      classes: (0, _extends2.default)({}, PaperProps.classes, {\n        root: classes.paper\n      })\n    }),\n    open: open,\n    ref: ref,\n    transitionDuration: transitionDuration\n  }, other), _react.default.createElement(_MenuList.default, (0, _extends2.default)({\n    onKeyDown: handleListKeyDown,\n    actions: menuListActionsRef,\n    autoFocus: autoFocus && firstSelectedIndex === null\n  }, MenuListProps, {\n    className: (0, _clsx.default)(classes.list, MenuListProps.className)\n  }), items));\n});\n\nprocess.env.NODE_ENV !== \"production\" ? Menu.propTypes = {\n  /**\n   * The DOM element used to set the position of the menu.\n   */\n  anchorEl: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]),\n\n  /**\n   * If `true` (default), the menu list (possibly a particular item depending on the menu variant) will receive focus on open.\n   */\n  autoFocus: _propTypes.default.bool,\n\n  /**\n   * Menu contents, normally `MenuItem`s.\n   */\n  children: _propTypes.default.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: _propTypes.default.object.isRequired,\n\n  /**\n   * Same as `autoFocus=false`.\n   * @deprecated Use `autoFocus` instead\n   */\n  disableAutoFocusItem: _propTypes.default.bool,\n\n  /**\n   * Properties applied to the [`MenuList`](/api/menu-list/) element.\n   */\n  MenuListProps: _propTypes.default.object,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback\n   * @param {string} reason Can be:`\"escapeKeyDown\"`, `\"backdropClick\"`, `\"tabKeyDown\"`\n   */\n  onClose: _propTypes.default.func,\n\n  /**\n   * Callback fired before the Menu enters.\n   */\n  onEnter: _propTypes.default.func,\n\n  /**\n   * Callback fired when the Menu has entered.\n   */\n  onEntered: _propTypes.default.func,\n\n  /**\n   * Callback fired when the Menu is entering.\n   */\n  onEntering: _propTypes.default.func,\n\n  /**\n   * Callback fired before the Menu exits.\n   */\n  onExit: _propTypes.default.func,\n\n  /**\n   * Callback fired when the Menu has exited.\n   */\n  onExited: _propTypes.default.func,\n\n  /**\n   * Callback fired when the Menu is exiting.\n   */\n  onExiting: _propTypes.default.func,\n\n  /**\n   * If `true`, the menu is visible.\n   */\n  open: _propTypes.default.bool.isRequired,\n\n  /**\n   * @ignore\n   */\n  PaperProps: _propTypes.default.object,\n\n  /**\n   * `classes` property applied to the [`Popover`](/api/popover/) element.\n   */\n  PopoverClasses: _propTypes.default.object,\n\n  /**\n   * @ignore\n   */\n  theme: _propTypes.default.object.isRequired,\n\n  /**\n   * The length of the transition in `ms`, or 'auto'\n   */\n  transitionDuration: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({\n    enter: _propTypes.default.number,\n    exit: _propTypes.default.number\n  }), _propTypes.default.oneOf(['auto'])]),\n\n  /**\n   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus\n   * and the vertical alignment relative to the anchor element.\n   */\n  variant: _propTypes.default.oneOf(['menu', 'selectedMenu'])\n} : void 0;\n\nvar _default = (0, _withStyles.default)(styles, {\n  name: 'MuiMenu',\n  withTheme: true\n})(Menu);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}